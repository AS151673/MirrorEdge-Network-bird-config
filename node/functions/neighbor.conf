include "predefined.conf";
include "no_as_loop.conf";
include "rpki.conf";

function delete_last(int lastval){
    bgp_large_community.delete([(MY_COMMUNITY,  1, lastval),
                                (MY_COMMUNITY,  2, lastval),
                                (MY_COMMUNITY,  3, lastval),
                                (MY_COMMUNITY,  4, lastval),
                                (MY_COMMUNITY,  5, lastval),
                                (MY_COMMUNITY,101, lastval),
                                (MY_COMMUNITY,201, lastval),
                                (MY_COMMUNITY,202, lastval),
                                (MY_COMMUNITY,203, lastval),
                                (MY_COMMUNITY,204, lastval),
                                (MY_COMMUNITY,209, lastval)]);
}

function add_geoinfo()
{
    bgp_large_community.add((MY_COMMUNITY,10000,MY_REGION));
    bgp_large_community.add((MY_COMMUNITY,10001,MY_COUNTRY));
    if (MY_COMMUNITY,1019,0) !~ bgp_large_community then {
        bgp_large_community.add((MY_COMMUNITY,1010,0));
        bgp_large_community.add((MY_COMMUNITY,1011,MY_REGION));
    }
}

function prepend_asn_pow(int prepend_pow;int PREPEND_ASN){
    if prepend_pow = 1 then {
        bgp_path.prepend(PREPEND_ASN);
    }
    if prepend_pow = 2 then {
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
    }
    if prepend_pow = 4 then {
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
    }
    if prepend_pow = 8 then {
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
        bgp_path.prepend(PREPEND_ASN);
    }
}

function prepend_asn(int prepend_num;int PREPEND_ASN){
    if prepend_num = 1 then {
        prepend_asn_pow(1,PREPEND_ASN);
    }
    if prepend_num = 2 then {
        prepend_asn_pow(2,PREPEND_ASN);
    }
    if prepend_num = 3 then {
        prepend_asn_pow(1,PREPEND_ASN);
        prepend_asn_pow(2,PREPEND_ASN);
    }
    if prepend_num = 4 then {
        prepend_asn_pow(4,PREPEND_ASN);
    }
    if prepend_num = 5 then {
        prepend_asn_pow(1,PREPEND_ASN);
        prepend_asn_pow(4,PREPEND_ASN);
    }
    if prepend_num = 6 then {
        prepend_asn_pow(2,PREPEND_ASN);
        prepend_asn_pow(4,PREPEND_ASN);
    }
    if prepend_num = 7 then {
        prepend_asn_pow(1,PREPEND_ASN);
        prepend_asn_pow(2,PREPEND_ASN);
        prepend_asn_pow(4,PREPEND_ASN);
    }
    if prepend_num = 8 then {
        prepend_asn_pow(8,PREPEND_ASN);
    }
}

function prepend_asn_multi(int times;int prepend_num;int PREPEND_ASN){
    if times = 1 then {
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 2 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 3 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 4 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 5 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 6 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 7 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
    if times = 8 then {
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
        prepend_asn(prepend_num,PREPEND_ASN);
    }
}

function replace_pad_asn()
int path_len_orig;
int path_len_remain;
int asn_count;
{
    path_len_orig = bgp_path.len;
    bgp_path.delete(PUB_PADASN);
    path_len_remain = bgp_path.len;
    asn_count = path_len_orig - path_len_remain;
    prepend_asn(asn_count,LOCAL_ASN);
}

function add_type(string peer_type)
int neighbor_asn;
{
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="ibgp" || peer_type="grc") then {
        print "bgp_import: unknown peer_type:", peer_type;
        reject;
    }
    if bgp_path.len > 0 then{
        neighbor_asn = bgp_path.first;
    } else {
        neighbor_asn = LOCAL_ASN;
    }

    if (peer_type = "upstream" || ( neighbor_asn ~ large_asns && ( peer_type = "ixrs" || peer_type = "peer" ))) then {
        bgp_large_community.add((MY_COMMUNITY, 201 ,0));
        bgp_large_community.delete([(MY_COMMUNITY, 1000..9999, *)]);    # remove control community from upstream
    } else if peer_type = "ixrs" then {
        bgp_large_community.add((MY_COMMUNITY, 202 ,0));
        bgp_large_community.delete([(MY_COMMUNITY, 1000..9999, *)]);    # remove control community from ixrs
        if bgp_path ~ t1_asns then reject;                               # reject t1_asns
    } else if peer_type = "peer" then {
        bgp_large_community.add((MY_COMMUNITY, 203 ,0));
        bgp_large_community.delete([(MY_COMMUNITY, 1000..9999, *)]);    # remove control community from peer
        if bgp_path ~ t1_asns then reject;                               # reject t1_asns
    } else if peer_type = "downstream" then {
        bgp_large_community.add((MY_COMMUNITY, 204 ,0));
        if bgp_path ~ t1_asns then reject;                               # reject t1_asns
        if !no_as_loop(false) then reject;
    } else if peer_type = "ibgp" then {
        bgp_large_community.add((MY_COMMUNITY, 209 ,1));
    } else if peer_type = "grc" then {
        reject;
    }
}

function type_filter(int peer_asn; string peer_type) {
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="grc" || peer_type="ibgp") then {
        print "bgp_import: invalid peer_type";
        reject;
    }
    if peer_type = "upstream" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ large_asns then reject;                            # reject T1 routes
        if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "ixrs" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ large_asns then reject;                            # reject T1 routes
        if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "peer" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ large_asns then reject;                            # reject T1 routes
        if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "downstream" then {
        # export all routes to downstream
    } else if peer_type = "ibgp" then {
        # export all routes to ibgp
    } else if peer_type = "grc" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_path ~ t1_asns then reject;
    }
}

function should_do_action (int action_base; int peer_asn; string peer_type)
int matched_actions;
int action_to_all_asn;
int action_not_to_asn;
int action_to_asn;
int action_to_all_region;
int action_not_to_region;
int action_to_region;
int action_to_all_country;
int action_not_to_country;
int action_to_country;
int action_to_peer_type;
{
    matched_actions       = 0;
    action_to_all_asn     = action_base;
    action_not_to_asn     = action_base + 1;
    action_to_asn         = action_base + 2;
    action_to_all_region  = action_base + 10;
    action_not_to_region  = action_base + 11;
    action_to_region      = action_base + 12;
    action_to_all_country = action_base + 20;
    action_not_to_country = action_base + 21;
    action_to_country     = action_base + 22;
    action_to_peer_type   = action_base + 30;
    if (MY_COMMUNITY, action_to_asn, peer_asn) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_asn, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_asn, peer_asn) !~ bgp_large_community )then {
        matched_actions = matched_actions + 1;
    }
    if peer_type != "grc" && ((MY_COMMUNITY, action_to_region, MY_REGION) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_region, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_region, MY_REGION) !~ bgp_large_community )) then {
        if !(action_base = 1000 && peer_type = "downstream" ) then {
            matched_actions = matched_actions + 1; # reject on region is not valid on downstream session
        }
    }
    if peer_type != "grc" && ((MY_COMMUNITY, action_to_country, MY_COUNTRY) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_country, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_country, MY_COUNTRY) !~ bgp_large_community ))then {
        if !(action_base = 1000 && peer_type = "downstream" ) then {
            matched_actions = matched_actions + 1; # reject on country is not valid on downstream session
        }
    }
    if (MY_COMMUNITY, action_to_peer_type, 1) ~ bgp_large_community && peer_type = "upstream"   then matched_actions = matched_actions + 1;
    if (MY_COMMUNITY, action_to_peer_type, 2) ~ bgp_large_community && peer_type = "ixrs"       then matched_actions = matched_actions + 1;
    if (MY_COMMUNITY, action_to_peer_type, 3) ~ bgp_large_community && peer_type = "peer"       then matched_actions = matched_actions + 1;
    if (MY_COMMUNITY, action_to_peer_type, 4) ~ bgp_large_community && peer_type = "downstream" then matched_actions = matched_actions + 1;
    if (MY_COMMUNITY, action_to_peer_type, 8) ~ bgp_large_community && peer_type = "grc"        then matched_actions = matched_actions + 1;
    return matched_actions;
}

function do_control_action(int peer_asn; string peer_type)
int matched_action;
{
    # Implement (MY_COMMUNITY,10__,0)   do not send to XXX
    matched_action = should_do_action(1000, peer_asn, peer_type);
    if matched_action > 0 then {
        reject;
    }
    # Implement (MY_COMMUNITY,11__,0)   prepend 1 to XXX
    matched_action = should_do_action(1100, peer_asn, peer_type);
    if matched_action > 0 then {
        prepend_asn_multi(matched_action,1,LOCAL_ASN);
    }
    # Implement (MY_COMMUNITY,12__,0)   prepend 2 to XXX
    matched_action = should_do_action(1200, peer_asn, peer_type);
    if matched_action > 0 then {
        prepend_asn_multi(matched_action,2,LOCAL_ASN);
    }
    # Implement (MY_COMMUNITY,14__,0)   prepend 4 to XXX
    matched_action = should_do_action(1400, peer_asn, peer_type);
    if matched_action > 0 then {
        prepend_asn_multi(matched_action,4,LOCAL_ASN);
    }
    # Implement (MY_COMMUNITY,18__,0)   prepend 8 to XXX
    matched_action = should_do_action(1800, peer_asn, peer_type);
    if matched_action > 0 then {
        prepend_asn_multi(matched_action,8,LOCAL_ASN);
    }
}

function replace_control_action_ibgp(){
    if (MY_COMMUNITY, 1040, 1) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1030 ,1));
    if (MY_COMMUNITY, 1040, 2) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1030 ,2));
    if (MY_COMMUNITY, 1040, 3) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1030 ,3));
    if (MY_COMMUNITY, 1040, 4) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1030 ,4));
    if (MY_COMMUNITY, 1140, 1) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1130 ,1));
    if (MY_COMMUNITY, 1140, 2) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1130 ,2));
    if (MY_COMMUNITY, 1140, 3) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1130 ,3));
    if (MY_COMMUNITY, 1140, 4) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1130 ,4));
    if (MY_COMMUNITY, 1240, 1) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1230 ,1));
    if (MY_COMMUNITY, 1240, 2) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1230 ,2));
    if (MY_COMMUNITY, 1240, 3) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1230 ,3));
    if (MY_COMMUNITY, 1240, 4) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1230 ,4));
    if (MY_COMMUNITY, 1440, 1) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1430 ,1));
    if (MY_COMMUNITY, 1440, 2) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1430 ,2));
    if (MY_COMMUNITY, 1440, 3) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1430 ,3));
    if (MY_COMMUNITY, 1440, 4) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1430 ,4));
    if (MY_COMMUNITY, 1840, 1) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1830 ,1));
    if (MY_COMMUNITY, 1840, 2) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1830 ,2));
    if (MY_COMMUNITY, 1840, 3) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1830 ,3));
    if (MY_COMMUNITY, 1840, 4) ~ bgp_large_community then bgp_large_community.add((MY_COMMUNITY, 1830 ,4));
}

function path_whitelist(int set allowed_path)
{
    if delete(bgp_path,allowed_path).len > 0 then reject;
}

function net_whitelist(prefix set prefix_whitelist)
{
    if net !~ prefix_whitelist then {
        print bgp_path.first, ": filtered ", net, "are not in prefix_whitelist";
        reject;
    }
}
function set_pref(){
    if bgp_large_community ~ [(MY_COMMUNITY, 101, *)] then return true; # Implement (asn,101,*) keep local_perf
    if bgp_path ~ t1_asns then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=170;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community || (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=170;
        } else {
            bgp_local_pref=100;
        }
    } else if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=190;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community || (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=170;
        } else {
            bgp_local_pref=100;
        }
    } else if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=280;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community || (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=240;
        } else {
            bgp_local_pref=110;
        }
    } else if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=290;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community || (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=250;
        } else {
            bgp_local_pref=110;
        }
    } else if bgp_large_community ~ [(MY_COMMUNITY,  204,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=390;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community || (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=360;
        } else {
            bgp_local_pref=120;
        }
    }
}
function ebgp_import(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist; int set asn_whitelist){
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    bgp_large_community.delete([(MY_COMMUNITY, 0..999, *)]);
    bgp_large_community.delete([(MY_COMMUNITY, 10000..99999, *)]);
    add_geoinfo();
    add_type(peer_type);
    set_pref();
    net_whitelist(prefix_whitelist);
    do_rpki_check();
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    if prepend_num = 4294967295 then {
        bgp_large_community.add((MY_COMMUNITY,1019,1));
    } else {
        prepend_asn(prepend_num,PUB_PADASN);
    }
    return true;
}

function ebgp_export(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist;  int set asn_whitelist) {
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
    if bgp_large_community ~ [(MY_COMMUNITY,  2,*)] then reject;                          # Implement (asn, 2,*)   do not send to ebgp
    type_filter(peer_asn, peer_type);
    if (MY_COMMUNITY,1019,1) !~ bgp_large_community then {
        prepend_asn(prepend_num,LOCAL_ASN);
    }
    if prepend_num = 4294967295 then {
        bgp_path.delete(PUB_PADASN);
    } else {
        replace_pad_asn();
    }
    do_control_action(peer_asn, peer_type);
    bgp_large_community.delete([(MY_COMMUNITY, 0..9999 , *)]);
    net_whitelist(prefix_whitelist);
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
};

function ibgp_import() {
    set_pref();
    return true;
};
function ibgp_export() {
    if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
    delete_last(1);
    if bgp_large_community ~ [(MY_COMMUNITY,  1,*)] then reject;                           # Implement (asn, 1,*)   do not send to ibgp
    replace_control_action_ibgp();
    add_geoinfo();
    return true;
};
